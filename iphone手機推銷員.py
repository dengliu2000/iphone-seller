# -*- coding: utf-8 -*-
"""iphone手機推銷員.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15b_ytTigL1SnGH3sH66aX39kvlqpOCGZ
"""

#安裝python套件
!pip install openai
!pip install python-dotenv
!pip install gradio
!pip install pytube

#設定OpenAI API金鑰，及讀取從.env設定檔中提供的金鑰
import openai
from dotenv import dotenv_values
config = dotenv_values('.env')
openai.api_key = config["API_KEY"]

#使用pytube下載YouTube影片的音檔，然後使用OpenAI的Whisper模型將音檔轉換成文字
from pytube import YouTube
def get_audio_text(audio_path, title):
  audio = open(audio_path, "rb")
  res = openai.Audio.transcribe(
      model="whisper-1",
      file=audio,
      prompt=title
  )
  return res["text"]

#從YouTube影片URL中提取音檔，轉換成文字，然後回傳影片標題和轉換後的文字內容。
def get_video_title_text(video_url ,audio_name):
  video = YouTube(video_url)
  stream = video.streams.filter(only_audio=True).first()
  audio_path = stream.download(filename=audio_name)
  text = get_audio_text(audio_path, video.title)
  return video.title, text

#從YouTube影片URL中獲取影片的標題和轉換後的文字內容，然後以字典形式回傳
def get_video_info(video_url,idx):
 videos_info = {}
 title, text = get_video_title_text(video_url, f"{idx}.mp3")
 videos_info[title] = text
 return videos_info

#從YouTube影片URL中獲取影片的標題和轉換後的文字內容，然後以字典形式回傳(多個影片)
def get_playlist_info():
  playlist = ['https://www.youtube.com/watch?v=HM_LZhHzLT8','https://www.youtube.com/watch?v=aKjVNbFidHA','https://www.youtube.com/watch?v=erMyXkfgC0w&t=1s','https://www.youtube.com/watch?v=XBvom0yTdek','https://www.youtube.com/watch?v=x5h1yoG-b0I','https://www.youtube.com/watch?v=MJOX5HN4Nvs','https://www.youtube.com/watch?v=JSL1eAGnxm8']
  videos_info = {}
  for idx, video_url in enumerate(playlist):
    title, text = get_video_title_text(video_url, f"{idx}.mp3")
    videos_info[title] = text
  return videos_info

playlist_info = get_playlist_info()

print(playlist_info)

#將影片訊息儲存在一個PandasDataFrame中，然後將該DataFrame輸出為一個CSV檔案
import pandas as pd
df = pd.DataFrame(list(playlist_info.items()), columns=["title", "text"])
df.to_csv("video_text.csv", index=False)

df = pd.read_csv("video_text.csv")
df

df["text"][2]

len(df["text"][0].split(' '))

#將一個長字符串分割成多個字符串，每個字符串以指定的title為開頭，然後在其後加上50句話的內容（如果不足50句話，則以剩餘的句數結束），最後將這些字符串存儲在一個列表中回傳
def split_text(all_text, title):
  text_list = all_text.split(' ')
  text = title
  new_text_list = []
  for idx, i in enumerate(text_list):
    text += f",{i}"
    if (idx+1)%50==0 or idx==len(text_list)-1:
      new_text_list.append(text)
      text = title
  return new_text_list

#使用enumerate跑過所有影片內容，將每個影片的文字內容進行分割，並將分割後的字串添加到split_text_list中，每個字串都以相應的影片標題作為開頭
split_text_list = []
for idx, text in enumerate(df["text"].values):
  split_text_list += split_text(text, df["title"][idx])

len(split_text_list)

df = pd.DataFrame(split_text_list, columns=['split_text_list'])
df

#使用Enbedding模型對文字內容向量化
def get_embedding(text):
  res = openai.Embedding.create(
      model="text-embedding-ada-002",
      input=text
  )
  return res["data"][0]["embedding"]

#影片文字檔內容向量化
split_text_embeddings = [get_embedding(i) for i in df["split_text_list"]]

df["embeddings"] = split_text_embeddings
df

#計算問題與每個切割後字串的距離(以向量計算)，選取三個最接近的字串，並傳至nearest_text這個空字串中，利用模型生成回答
from openai.embeddings_utils import distances_from_embeddings, indices_of_nearest_neighbors_from_distances
def choose(user_question):
  question_embedding = get_embedding(user_question)
  distance = distances_from_embeddings(question_embedding, df["embeddings"])
  nearest_index = indices_of_nearest_neighbors_from_distances(distance)
  nearest_text = ""
  for i in range(3):
    nearest_text += df["split_text_list"][nearest_index[i]] + '\n'

  prompt = f"""
  你是一位手機推銷人員，最近要推銷iPhone 15系列，請根據以下內容回答此問題:{user_question}
  如果沒有100%的確定，就回答'我不知道'

  ###
  內容:
  {nearest_text}
  ###

  """
  print(prompt)
  res = openai.Completion.create(
      model="text-davinci-003",
      prompt=prompt,
      max_tokens=700,
      temperature=0
  )
  return res["choices"][0]["text"]

#建立使用者UI介面
import gradio as gr

demo = gr.Interface(
    fn=choose,
    inputs="text",
    outputs="text",
    title="iPhone手機推銷員",
    description="輸入您的問題:",
    allow_flagging="never"
)

demo.launch(debug=True)